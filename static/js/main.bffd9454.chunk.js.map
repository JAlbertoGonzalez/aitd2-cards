{"version":3,"sources":["components/Main.js","App.js","serviceWorker.js","index.js"],"names":["colorNames","Map","colorKeys","figureNames","figureKeys","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cardNames","firstCard","overCard","holes","hole","resultString","data","cards","map","obj","push","n","r","sort","setState","str","newString","i","length","_this2","find","element","firstCardColors","c","reverseString","overCardColors","overCardFigures","f","positionHole","indexOf","resultColor","charAt","resultFigure","finalString","get","updateCard","_this3","react_default","a","createElement","onChange","e","target","value","cardName","number","onClick","React","Component","App","className","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bffd9454.chunk.js","sourcesContent":["import React from 'react'\r\nimport data from '../data.json'\r\n\r\nconst colorNames = new Map([\r\n    ['B', 'Blue'],\r\n    ['Y', 'Yellow'],\r\n    ['P', 'Purple'],\r\n    ['R', 'Red'],\r\n    ['O', 'Orange'],\r\n    ['G', 'Green']\r\n]);\r\n\r\nconst colorKeys = new Map([\r\n    ['Y', 'F6'],\r\n    ['G', 'F7'],\r\n    ['B', 'F8'],\r\n    ['P', 'F9'],\r\n    ['O', 'F10'],\r\n    ['R', 'F5+F10'],\r\n]);\r\n\r\nconst figureNames = new Map([\r\n    ['C', 'Clubs'],\r\n    ['S', 'Spades'],\r\n    ['D', 'Diamonds'],\r\n    ['H', 'Hearts'],\r\n]);\r\n\r\nconst figureKeys = new Map([\r\n    ['S', 'F1'],\r\n    ['H', 'F2'],\r\n    ['D', 'F3'],\r\n    ['C', 'F4'],\r\n]);\r\n\r\nclass Main extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cardNames: [],\r\n            firstCard: null,\r\n            overCard: null,\r\n            holes: [1, 2, 3, 4, 5, 6],\r\n            hole: 0,\r\n            resultString: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        var cardNames = [];\r\n        data.cards.map(obj => {\r\n            cardNames.push(obj.n);\r\n            cardNames.push(obj.r);\r\n        });\r\n\r\n        cardNames.sort();\r\n\r\n        this.setState({\r\n            cardNames: cardNames\r\n        });\r\n    }\r\n\r\n    reverseString(str) {\r\n        var newString = \"\";\r\n        for (var i = str.length - 1; i >= 0; i--) { newString += str[i]; }\r\n        return newString;\r\n    }\r\n\r\n\r\n    updateCard() {\r\n        if (this.state.hole > 0 && this.state.firstCard && this.state.overCard) {\r\n            // Find cards\r\n\r\n            var firstCard = data.cards.find(element => {\r\n                return element.n === this.state.firstCard || element.r === this.state.firstCard;\r\n            });\r\n            var overCard = data.cards.find(element => {\r\n                return element.n === this.state.overCard || element.r === this.state.overCard;\r\n            });\r\n\r\n            var firstCardColors = firstCard.c;\r\n            // var firstCardFigures = firstCard.f;\r\n            if (firstCard.r === this.state.firstCard) {\r\n                firstCardColors = this.reverseString(firstCardColors);\r\n                // firstCardFigures = this.reverseString(firstCardFigures);\r\n            }\r\n\r\n            var overCardColors = overCard.c;\r\n            var overCardFigures = overCard.f;\r\n            if (overCard.r === this.state.overCard) {\r\n                overCardColors = this.reverseString(overCardColors);\r\n                overCardFigures = this.reverseString(overCardFigures);\r\n            }\r\n\r\n            // Locate hole\r\n\r\n            var positionHole = -1;\r\n            for (let i = 1; i <= this.state.hole; i++) {\r\n                positionHole = firstCardColors.indexOf('_', positionHole + 1)\r\n            }\r\n\r\n            var resultColor = overCardColors.charAt(positionHole);\r\n            var resultFigure = overCardFigures.charAt(positionHole);\r\n\r\n            // Final result in readable text\r\n\r\n            var finalString = 'Error';\r\n\r\n            if (resultColor === '_' || resultColor === '_') {\r\n                finalString = 'Error, impossible combination'\r\n            } else {\r\n                finalString = colorNames.get(resultColor) + \" \" + figureNames.get(resultFigure) + \" (Press \" + figureKeys.get(resultFigure) + \" \" + colorKeys.get(resultColor) + \")\";\r\n            }\r\n\r\n            if (finalString !== this.state.resultString) {\r\n                this.setState({\r\n                    resultString: finalString\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.updateCard();\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <p>{this.state.firstCard} over {this.state.overCard},<br />Hole number: {this.state.hole}</p>\r\n            <h3>Result: {this.state.resultString}</h3>\r\n            <p>First card:</p>\r\n            <select onChange={(e) => { this.setState({ firstCard: e.target.value }); }}>\r\n                {this.state.cardNames.map(cardName => <option>{cardName}</option>)}\r\n            </select>\r\n            <p>Over:</p>\r\n            <select onChange={(e) => { this.setState({ overCard: e.target.value }); }}>\r\n                {this.state.cardNames.map(cardName => <option>{cardName}</option>)}\r\n            </select>\r\n\r\n            <p>Hole number</p>\r\n\r\n            {this.state.holes.map(number => <button onClick={() => {\r\n                this.setState({ hole: number });\r\n\r\n            }}>{number}</button>)}\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}